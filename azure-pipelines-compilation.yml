trigger:
  branches:
    include:
      - feature-pipeline

pool:
  name: Agent_Pool

steps:
  # Étape 1 : Copier tous les fichiers PHP pour le déploiement
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'  # Copie tous les fichiers du projet
      Contents: '**/*'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/php-app'

  # Étape 2 : Publier l'artefact PHP
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/php-app'
      artifactName: 'php-app'

  # Étape 3 : Déployer tous les fichiers PHP sur les ressources Azure
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'pay_as_you_go'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Variables de déploiement
        $RESOURCE_GROUP="rg-interstellar-havoc"
        $VM1_NAME="vm1559_z2"
        $VM2_NAME="vm2478_z1"
        $WEB_APP_PATH='/var/www/html'  # Emplacement de déploiement pour les fichiers PHP

        # Copier les fichiers sur les VMs (corrigé pour PowerShell)
        echo "Déploiement des fichiers PHP sur les machines virtuelles..."
        scp -r $(Build.ArtifactStagingDirectory)/php-app/* user@${VM1_NAME}:$WEB_APP_PATH
        scp -r $(Build.ArtifactStagingDirectory)/php-app/* user@${VM2_NAME}:$WEB_APP_PATH


        echo "Déploiement terminé. Validation en cours..."

  # Étape 4 : Vérifier que le fichier principal (index.php) est accessible
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'pay_as_you_go'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Adresses IP des VMs où le site doit être accessible
        $IP_VM1 = "172.203.225.108"
        $IP_VM2 = "20.121.129.244"
        $MAIN_FILE = "index.php"  # Fichier principal de votre application

        Write-Host "Vérification de l'accès à $MAIN_FILE sur les VMs..."

        try {
          $response1 = Invoke-WebRequest -Uri "http://$IP_VM1/$MAIN_FILE" -UseBasicParsing -ErrorAction Stop
          Write-Host "Réponse de VM1 : $($response1.StatusCode)"
        } catch {
          Write-Host "Erreur lors de l'accès à $MAIN_FILE sur VM1 : $_"
        }

        try {
          $response2 = Invoke-WebRequest -Uri "http://$IP_VM2/$MAIN_FILE" -UseBasicParsing -ErrorAction Stop
          Write-Host "Réponse de VM2 : $($response2.StatusCode)"
        } catch {
          Write-Host "Erreur lors de l'accès à $MAIN_FILE sur VM2 : $_"
        }
