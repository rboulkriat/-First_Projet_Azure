trigger:
  branches:
    include:
      - feature-pipeline

pool:
  name: Agent_Pool
steps:
  # Étape 1 : Installer Composer directement à partir du fichier d'installation
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '7.x'  # Assurez-vous que PHP est configuré correctement

  - script: |
      echo "Téléchargement et installation de Composer"
      curl -sS https://getcomposer.org/installer -o composer-setup.php
      php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    displayName: 'Télécharger et installer Composer'

  # Étape 2 : Exécuter Composer pour installer les dépendances
  - script: |
      composer install
    displayName: 'Installer les dépendances PHP avec Composer'

  # Étape 3 : Publier les fichiers PHP en tant qu'artefacts
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/php-app'
      artifactName: 'php-app'

  # Étape 4 : Déployer les fichiers sur les VMs via HTTP ou SSH
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'pay_as_you_go'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $RESOURCE_GROUP="rg-interstellar-havoc"
        $VM1_IP="172.203.225.108"
        $VM2_IP="20.121.129.244"
        $WEB_APP_PATH="/var/www/html"

        echo "Déploiement des fichiers PHP sur les machines virtuelles..."
        scp -r $(Build.ArtifactStagingDirectory)/php-app/* user@$VM1_IP:$WEB_APP_PATH
        scp -r $(Build.ArtifactStagingDirectory)/php-app/* user@$VM2_IP:$WEB_APP_PATH
        echo "Déploiement terminé."

  # Étape 5 : Validation de l’accessibilité de index.php
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'pay_as_you_go'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $IP_VM1 = "172.203.225.108"
        $IP_VM2 = "20.121.129.244"
        $MAIN_FILE = "index.php"

        Write-Host "Vérification de l'accès à $MAIN_FILE via HTTP sur les VMs..."

        try {
          $response1 = Invoke-WebRequest -Uri "http://$IP_VM1/$MAIN_FILE" -UseBasicParsing -ErrorAction Stop
          Write-Host "Réponse de VM1 : $($response1.StatusCode)"
        } catch {
          Write-Host "Erreur lors de l'accès à $MAIN_FILE sur VM1 : $_"
        }

        try {
          $response2 = Invoke-WebRequest -Uri "http://$IP_VM2/$MAIN_FILE" -UseBasicParsing -ErrorAction Stop
          Write-Host "Réponse de VM2 : $($response2.StatusCode)"
        } catch {
          Write-Host "Erreur lors de l'accès à $MAIN_FILE sur VM2 : $_"
        }
