trigger:
  branches:
    include:
      - main  # Déclenche le pipeline pour les changements dans la branche principale

pool:
  name: Agent_Pool  # Utilise votre pool d’agents personnalisé

steps:
  # Étape 1 : Installer Maven manuellement si absent
  - script: |
      echo "Téléchargement et installation de Maven..."
      curl -o apache-maven-3.8.4-bin.tar.gz https://downloads.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz
      tar xzvf apache-maven-3.8.4-bin.tar.gz -C /usr/share
      export PATH=$PATH:/usr/share/apache-maven-3.8.4/bin
      echo "Maven installé avec succès"
    displayName: 'Installer Maven sur l’agent'

  # Étape 2 : Installer Java avec JavaToolInstaller
  - task: JavaToolInstaller@0
    inputs:
      versionSpec: '11'  # Utilise Java 11, modifiez en fonction des besoins du projet
      jdkArchitectureOption: 'x64'
    displayName: 'Installer Java 11'

  # Étape 3 : Compiler et packager avec Maven via un script personnalisé
  - script: |
      echo "Compilation du projet avec Maven..."
      /usr/share/apache-maven-3.8.4/bin/mvn -f pom.xml clean package -B
    displayName: 'Compiler et packager avec Maven'

  # Étape 4 : Publier l'artefact compilé
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/target'  # Dossier où Maven produit le JAR ou WAR
      artifactName: 'java-app'
    displayName: 'Publier l’artefact pour le déploiement'

  # Étape 5 : Valider le déploiement en vérifiant l'accessibilité de l'application sur les VMs
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'pay_as_you_go'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # IP des machines virtuelles
        VM1_IP="172.203.225.108"
        VM2_IP="20.121.129.244"
        APP_PORT="8080"  # Le port sur lequel l'application Java est censée fonctionner

        echo "Validation de l'accès à l'application sur les VMs..."

        # Vérifie si l'application est accessible sur VM1
        if curl -s "http://$VM1_IP:$APP_PORT"; then
          echo "L'application est accessible sur VM1"
        else
          echo "Erreur : L'application n'est pas accessible sur VM1"
          exit 1
        fi

        # Vérifie si l'application est accessible sur VM2
        if curl -s "http://$VM2_IP:$APP_PORT"; then
          echo "L'application est accessible sur VM2"
        else
          echo "Erreur : L'application n'est pas accessible sur VM2"
          exit 1
        fi

        echo "Validation du déploiement réussie."
