trigger:
  branches:
    include:
      - main  # Déclenche le pipeline pour les changements dans la branche principale

pool:
  vmImage: 'windows-latest'  # Utilise un agent Windows hébergé par Microsoft avec Maven et Java installés

steps:
  # Étape 1 : Configurer Java
  - task: JavaToolInstaller@0
    inputs:
      versionSpec: '11'  # Utilise Java 11, modifiez en fonction des besoins du projet
      jdkArchitectureOption: 'x64'
    displayName: 'Installer Java 11'

  # Étape 2 : Compiler et packager avec Maven
  - task: Maven@3
    inputs:
      mavenPomFile: 'pom.xml'  # Fichier POM Maven pour le projet Java
      goals: 'package'  # Exécute la tâche 'package' pour compiler et packager le projet
      options: '-B'  # Mode batch pour les pipelines
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.11'  # Version de Java pour Maven
      mavenVersionOption: 'Default'
    displayName: 'Compiler et packager avec Maven'

  # Étape 3 : Publier l'artefact compilé
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)\target'  # Dossier où Maven produit le JAR ou WAR
      artifactName: 'java-app'
    displayName: 'Publier l’artefact pour le déploiement'

  # Étape 4 : Valider le déploiement en vérifiant l'accessibilité de l'application sur les VMs
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'pay_as_you_go'
      scriptType: 'ps'  # Utilisation de PowerShell sur un agent Windows
      scriptLocation: 'inlineScript'
      inlineScript: |
        # IP des machines virtuelles
        $VM1_IP = "172.203.225.108"
        $VM2_IP = "20.121.129.244"
        $APP_PORT = "8080"  # Le port sur lequel l'application Java est censée fonctionner

        Write-Host "Validation de l'accès à l'application sur les VMs..."

        # Vérifie si l'application est accessible sur VM1
        try {
          $response1 = Invoke-WebRequest -Uri "http://$VM1_IP:$APP_PORT" -UseBasicParsing
          Write-Host "L'application est accessible sur VM1"
        } catch {
          Write-Host "Erreur : L'application n'est pas accessible sur VM1"
          exit 1
        }

        # Vérifie si l'application est accessible sur VM2
        try {
          $response2 = Invoke-WebRequest -Uri "http://$VM2_IP:$APP_PORT" -UseBasicParsing
          Write-Host "L'application est accessible sur VM2"
        } catch {
          Write-Host "Erreur : L'application n'est pas accessible sur VM2"
          exit 1
        }

        Write-Host "Validation du déploiement réussie."
